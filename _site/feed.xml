<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>scottp.org</title>
    <description>scott persinger</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 07 Jun 2020 21:34:52 -0700</pubDate>
    <lastBuildDate>Sun, 07 Jun 2020 21:34:52 -0700</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Trust</title>
        <description>&lt;p&gt;Over the years I have come to appreciate how &lt;strong&gt;trust&lt;/strong&gt; is the key ingredient to any effective engineering organization. The presence of trust enables all sort of things to magically happen, while its abscence can torpedo almost any effort. Patrick Lencioni, in his book &lt;a href=&quot;https://www.amazon.com/Advantage-Organizational-Everything-Business-Lencioni-ebook/dp/B006ORWT3Y&quot;&gt;The Advantage&lt;/a&gt; places trust as the base principle amongst five that he identifies as the keys to any healthy organization.&lt;/p&gt;

&lt;h2 id=&quot;types-of-trust-in-the-org&quot;&gt;Types of trust in the org&lt;/h2&gt;

&lt;p&gt;The basic types of trust are the trust between peers, and trust up and down through the org chart. In larger orgs these basic types can mix into trust between whole groups, but the basic rules will apply.&lt;/p&gt;

&lt;h2 id=&quot;symptoms-for-a-lack-of-trust-between-peers&quot;&gt;Symptoms for a lack of trust between peers&lt;/h2&gt;

&lt;p&gt;The challenge of missing trust is that it will manifest through lots of symptoms that people will describe in other terms. It isn’t often that the participants in a conflict recognize that mistrust is at the root.&lt;/p&gt;

&lt;h3 id=&quot;bob-is-an-idiot&quot;&gt;“Bob is an idiot”&lt;/h3&gt;

&lt;p&gt;This is the classic signal between engineering peers. I know that Alice is a quality engineer, and so is Bob. And yet Alice thinks that Bob is an idiot with regard to some technical question. What Alice is really trying to say is “I don’t trust Bob, and so I don’t trust his technical judgement on X.”&lt;/p&gt;

&lt;h3 id=&quot;bob-has-his-own-agenda&quot;&gt;“Bob has his own agenda”&lt;/h3&gt;

&lt;p&gt;Alice thinks that &lt;em&gt;her&lt;/em&gt; motivations are supporting the company, while Bob has some ulterior motive. Besides being a sign that Alice probably needs to ask Bob more questions and understand his point of view, Alice also needs to understand why she doesn’t &lt;em&gt;trust&lt;/em&gt; Bob to have good motivations, and how she could build that trust.&lt;/p&gt;

&lt;h3 id=&quot;bob-doesnt-communicate-well&quot;&gt;“Bob doesn’t communicate well”&lt;/h3&gt;

&lt;p&gt;Oftentimes Alice will complain that she suffers repeated misunderstandings with Bob. She thinks that Bob just doesn’t know how to communicate effectively. And Bob probably thinks the same thing about Alice. But often these “failures to communicate” are not actually about effectively transmitting information. Rather they indicate low trust between Bob and Alice. Like the trust required to ask “dumb” questions for more clarity. Or the trust to assume good intentions on the other side, so that if Alice doesn’t like Bob’s argument she can keep asking constructive questions until she gets to a fuller understanding.&lt;/p&gt;

&lt;h2 id=&quot;building-trust-between-peers&quot;&gt;Building trust between peers&lt;/h2&gt;

&lt;p&gt;The basic recipe for trust between peers is time and familiarity. The more that Alice and Bob get to know each other, about work and personally, the more they will naturally develop a level of trust. For co-workers sharing an office over a period of time this will likely happen naturally.&lt;/p&gt;

&lt;p&gt;However, in a larger organization, or between peers that work remotely or don’t interact that often, there often won’t be easy chances for trust to develop. In this case leadership should be thinking about continual practice to increase trust:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Develop, communicate, and teach a strong set of &lt;em&gt;core values&lt;/em&gt;. This gives everyone in the org a shared value system and something they will naturally have in common.&lt;/li&gt;
  &lt;li&gt;Train people for better communication: “Seek first to understand…”, “Assume good intentions”, “Play back what you hear”, etc…&lt;/li&gt;
  &lt;li&gt;Find ways to help people get to know each other personally - basic “team building” exercises.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are great long term strategies, but when I find myself mediating a conflict that I trace back to a lack of trust, then I look to these tactics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ask Alice and Bob to meet face to face. Text-only comms (Slack battles, PR comment threads) are a breeding ground for mistrustful communication, which can often be fixed with a simple high-bandwidth meeting.&lt;/li&gt;
  &lt;li&gt;Mediate the meeting yourself.&lt;/li&gt;
  &lt;li&gt;Point out to the participants that you perceive a lack of trust. Ask why they don’t trust the intentions of the other side, and how can we work together.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;trust-up-and-down-the-org&quot;&gt;Trust up and down the org&lt;/h2&gt;

&lt;p&gt;Team members earn trust upwards in the organization in mostly obvious ways: demonstrating committment to the company and its values, delivering on time, and “doing what it takes” rather than narrowly interpreting their responsibilities.&lt;/p&gt;

&lt;p&gt;Another great skill is &lt;strong&gt;transparency&lt;/strong&gt; - are you helping me understand what you are working on and how you are making decisions? Being transparent like this goes a long way toward making your manager’s life easier. I’ve had excellent engineers who worked for me, but their work was very opaque. They might promise to deliver a feature in two weeks, and I could count on that timely delivery. But along the way I would get minimal insight into the project. This isn’t the best way to build trust. I want to know enough detail to know if there’s a problem with the spec, or some particular technical challenge. It is a skill to learn how to broadcast those details at the right level of abstraction upwards in the org.&lt;/p&gt;

&lt;p&gt;For leaders, earning trust with those reporting to you is all about transparency and collaboration in decision making. People don’t like to be suprised, and they like to have a voice in any decisions that affects them or their work. This doesn’t mean resorting to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Holacracy&quot;&gt;holacracy&lt;/a&gt;, but it does mean explaining &lt;em&gt;how&lt;/em&gt; and &lt;em&gt;why&lt;/em&gt; a decision got made, and reading folks into the decision as early as possible.&lt;/p&gt;

&lt;p&gt;One of the persistent challenges I still encounter is the trade-off between quick decision making and &lt;em&gt;transparent&lt;/em&gt; decision making. Speed of decisions is one of the critical inputs into your overall velocity as an organization, but quick decisions may erode trust in the people affected. It’s critical to build up a high level of trust in the org that will enable you to make fast decisions.&lt;/p&gt;

</description>
        <pubDate>Mon, 11 May 2020 00:07:56 -0700</pubDate>
        <link>http://localhost:4000/the-value-of-trust</link>
        <guid isPermaLink="true">http://localhost:4000/the-value-of-trust</guid>
        
        
      </item>
    
      <item>
        <title>Technical Debt</title>
        <description>&lt;p&gt;I have had the great fortune of starting a few companies and products from scratch. These were true mythic &lt;em&gt;green field&lt;/em&gt; opportunities - not a line of code existed when we started. For most companies, however, and most developers, there is some legacy of code written some time in the 
past. And some of this code may now be weighing you down, or &lt;em&gt;slowing&lt;/em&gt; you down. This condition has inherited the useful name of &lt;em&gt;technical debt&lt;/em&gt;. I want to talk about some of the different types of debt you may encounter and how I think about each of them.&lt;/p&gt;

&lt;h1 id=&quot;debt-is-good&quot;&gt;Debt is good&lt;/h1&gt;

&lt;p&gt;The first thing to remember is that &lt;em&gt;technical debt is good&lt;/em&gt;! This is because technical debt is usually a sign of a successful business - one whose growth and success means that solutions to early problems are now showing their age. Some debt is good, but too much debt can be a killer. The trick is to manage your development process so that debt doesn’t get out of hand.&lt;/p&gt;

&lt;p&gt;Now the truth is, some software businesses are so successful, and grow so fast, that they generate enormous amounts of tech debt. The demand to satisfy the market simply outstrips the capacity of the engineering team to go back and fix old code. You are very lucky if you own equity in a company like this! However, working as a &lt;em&gt;developer&lt;/em&gt; in an organization like this can be very stressful and unrewarding. An increasing percentage of every developer’s day is spent fighting the tech debt inside the product, even as the business may continue growing very successfully.&lt;/p&gt;

&lt;h1 id=&quot;scale-debt&quot;&gt;Scale Debt&lt;/h1&gt;

&lt;p&gt;One typical type of debt comes from solutions that are failing to scale to meet current load demands. Scale problems are inevitable if load is growing, and the techniques for solving them are generally well known until you get to huge scale. The key tool for solving scale problems is to give your team sufficient time to create the new solution. Depending on the system it may take 2-6 months to build something that can handle 10x the load of the old system. Depending on your growth curve you may want to plan to handle 100x the load, and this might mean taking 12 months to build the new system, buying a pre-built solution or service, or hiring a specialist that has built for that scale before.&lt;/p&gt;

&lt;h1 id=&quot;test-debt&quot;&gt;Test debt&lt;/h1&gt;

&lt;p&gt;A very typical situation for growing startups is to find that their system has bad and missing tests. Bad tests are flaky and hard to maintain. But even worse are &lt;em&gt;missing&lt;/em&gt; tests. This manifests as the inability to make invasive code changes with confidence that you aren’t breaking your system. There exist areas of your system that developers are afraid to change because they “work”, today. The problem is that you probably need to add new functionality to these areas, or refactor that code to be more maintanable.&lt;/p&gt;

&lt;p&gt;The first solution to test debt is straightforward: write more tests. And give your engineering team the schedule slack to write those tests.&lt;/p&gt;

&lt;p&gt;A more subtle challenge is how, oftentimes, components of your system will not have been designed to be easily testable. A typical example is code that interacts with some external system, but mingles additional logic in with the code that talks to that system. This makes it difficult to write separate tests for the integration logic and the internal logic. It may make sense to refactor those systems or modules in order to make them more testable. Depending on your situation however, sometimes it makes more sense to just rewrite a component from scratch with an eye towards testabilty.&lt;/p&gt;

&lt;h1 id=&quot;architecture-debt&quot;&gt;Architecture debt&lt;/h1&gt;

&lt;p&gt;In my experience the most difficult type of technical debt to fix is &lt;em&gt;architecture debt&lt;/em&gt;. This debt occurs when the architecture of your system (data models, interfaces between modules, assumptions about behavior) does not match your current requirements. The classic example is the “company/org” problem. Most SaaS startups begin life with a data model with one entity that represents people, and a containing entity that represents companies. This model works fine until you get big enough that some of your larger customers may have separate groups that all want to use your product. If you pack all the users in all those groups into a single Company entity then all of their usage of your product will be mixed together. But if you model each group as a separate Company, then you will likely find it hard to manage billing for the single corporation. The solution is the &lt;em&gt;Organization&lt;/em&gt; model which represents another level of container above your Company entity.&lt;/p&gt;

&lt;p&gt;I have seen and lived through multiple projects which introduced another container level in the company hierarchy, and each one of them was extraordinarily painful. The entities often live at the heart of your system and have accrued tremendous amounts of logic and entanglement with various parts of the system. Building and migrating to the new data model can take many months of preparation, development and testing.&lt;/p&gt;

&lt;p&gt;Architecture debt can be insidious and very damaging to productivity. Product or code compromises often have to be made in order to “fit into” the current architecture. Some of you may remember when YouTube migrated to support native Google accounts. This change took months (years?) and I have no doubt a tremendous internal engineering effort.&lt;/p&gt;

&lt;p&gt;I don’t have any panacea to offer as a solution for architecture debt, but I do offer some recommendations to help make it more manageable:&lt;/p&gt;

&lt;p&gt;-Maintain agility on your core data model. Separate features like billing info, contact info, and authorization settings from your core entities earlier than is strictly required. And make sure you have really good tests around your core data model.&lt;/p&gt;

&lt;p&gt;-Separate features and concerns into distinct systems. I am &lt;a href=&quot;http://scottp.org/2017/08/06/busting-the-monolith/&quot;&gt;not a fan&lt;/a&gt; of the current “back to the monolith!” movement. Sure, too many microservices too early is a recipe for a headache. But when monoliths inevitably accrue architecture debt, they can be incredibly difficult to change. Even having a small-N number of cooperating services will give you the chance to rearchitect or rebuild one of them without having to rewrite your whole product.&lt;/p&gt;

&lt;p&gt;-Go read &lt;a href=&quot;https://dddcommunity.org/&quot;&gt;Domain Driven Design&lt;/a&gt; by Eric Evans. And then read it again. And then re-read it every 12 months. The ability to iterate your system’s model of the business domain is one of the keys to solving architecture debt.&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:07:56 -0700</pubDate>
        <link>http://localhost:4000/technical-debt</link>
        <guid isPermaLink="true">http://localhost:4000/technical-debt</guid>
        
        
      </item>
    
      <item>
        <title>Platform migration: personal blog edition</title>
        <description>&lt;p&gt;Every few years I update my blog to a new system, both as a learning opportunity and to avoid getting stuck on something unmaintained. Last time I migrated from &lt;a href=&quot;https://wordpress.com&quot;&gt;Wordpress&lt;/a&gt; to &lt;a href=&quot;https://ghost.org/&quot;&gt;Ghost blog&lt;/a&gt;, and this time I migrated to &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Jekyll is a static site generator. All the dynamic page generation happens in a compile step which generates static files for serving to the browser. This results in a very fast site, but doesn’t play so well if you want to easily create, edit, and publish lots of posts. Fortunately I don’t need anything that dynamic, and keeping my posts in source control is a great strategy for long term maintenance.&lt;/p&gt;

&lt;p&gt;Jekyll is roughly one cycle old on the technology curve. It’s into the ‘early majority’ part of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Technology_adoption_life_cycle&quot;&gt;tech adoption cycle&lt;/a&gt;. I assume the innnovators for blogs are React-based systems like &lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;Gastby&lt;/a&gt;. But I don’t really need a lot of React-style interactivity. I’m a fan of sticking with the early majority strategy to strike the right balance between innovation benefits and system maturity. This is usually my approach with phones and OS’s - give me the last major release where all the bugs have been worked out!&lt;/p&gt;

&lt;p&gt;I think this is also a good approach in general when picking a new technology stack for an app or service. Taking up the bleeding edge has a lot of risk (go talk to the people on Angular 1) that you pick something that ultimately doesn’t reach a stable level of maturity. But always picking “tried and true” (the late majority stage) often leaves you on an older technology that isn’t innovating anymore.&lt;/p&gt;

&lt;h1 id=&quot;rise-of-the-front-end-developers&quot;&gt;Rise of the front-end developers&lt;/h1&gt;

&lt;p&gt;Static site generators came out of a reaction to the rising complexity of the standard CMS systems (Wordpress, Drupal, etc…). But their theory and rise dovetails with the development of React and the general explosion of front-end development as a truly specialized profession. Much of this world is working to reduce the importance of back-end development and leverage the browser as a first-class app delivery platform.&lt;/p&gt;

&lt;p&gt;I’m intrigued to see how richer “site generator” systems like Gatsby evolve over time. Can they actually introduce richer interactivity and persistent state without dragging the full complexity of back-end engineering into the picture?&lt;/p&gt;

&lt;h1 id=&quot;github-hosting&quot;&gt;GitHub hosting&lt;/h1&gt;

&lt;p&gt;When I was running Ghost I hosted it on my own simple AWS Lightsail server. Cost like $4/mo and was easy to manage. Nonetheless it seemed retrograde - &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt;‘ing into a cheap VPS just to update my blog! Fortunately GitHub now offers &lt;a href=&quot;https://help.github.com/en/github/working-with-github-pages/setting-up-a-github-pages-site-with-jekyll&quot;&gt;free hosting&lt;/a&gt; for static sites, and supports Jekyll natively. It’s all pretty slick. Once you have it setup then all you need to do is to merge a new post into &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; and it re-deploys the blog. Very simple - no server needed.&lt;/p&gt;

</description>
        <pubDate>Mon, 04 Nov 2019 00:07:56 -0800</pubDate>
        <link>http://localhost:4000/now-hosting-with-jekyll</link>
        <guid isPermaLink="true">http://localhost:4000/now-hosting-with-jekyll</guid>
        
        
      </item>
    
      <item>
        <title>AWS is a 1000 piece lego kit</title>
        <description>&lt;p&gt;I’ve been spending time lately trying to get a deeper understanding of the current world of AWS. That platform grows and changes so quickly that it takes real effort just to keep up!&lt;/p&gt;

&lt;p&gt;The breadth of AWS is pretty incredible:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Elastic compute&lt;/li&gt;
  &lt;li&gt;Networking services&lt;/li&gt;
  &lt;li&gt;File storage&lt;/li&gt;
  &lt;li&gt;Data storage and data services&lt;/li&gt;
  &lt;li&gt;Messaging and event stream services&lt;/li&gt;
  &lt;li&gt;Developer tools and services&lt;/li&gt;
  &lt;li&gt;Security tools&lt;/li&gt;
  &lt;li&gt;Metrics and monitoring&lt;/li&gt;
  &lt;li&gt;Business applications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just wrapping your head around all these services is a challenge. Then trying to build a mental model of how these services fit together and how you might leverage them for your work is a whole project unto itself - if not a whole career.&lt;/p&gt;

&lt;p&gt;AWS these days reminds me of a modern-day, 1000 piece Lego set. Back when I was a kid there were like 10 different lego pieces. That was it! You built everything from this small set of interchangeable blocks.&lt;/p&gt;

&lt;p&gt;But somewhere along the way Lego mastered bespoke lego-piece engineering and brand licensing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-us-west-1.amazonaws.com/assets-scottp-org/2017/08/millennium.jpg&quot; alt=&quot;millennium&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The result are lego sets comprising hundreds of specialized pieces. Once one of my kids received a 976 piece lego set from his grandmother. He was so excited that while I was out of the room he set about opening &lt;strong&gt;every single&lt;/strong&gt; bag of pieces in the box and dumping them all out of the floor! Woe betide the parent who has to assemble a thousand random lego pieces into a recognizable structure!&lt;/p&gt;

&lt;p&gt;And this is what AWS reminds me of today. Not because many of the services don’t have important, unique features. For sure they do. The problem is, how do I know which ones to use for my particular problem?&lt;/p&gt;

&lt;p&gt;Should I use Mysql, Mariadb, or Aurora?&lt;/p&gt;

&lt;p&gt;I need to dispatch some background jobs. Should I use SQS or Kinesis? In the past I’ve used Redis for lightweight queuing so maybe I should just use Elasticache?&lt;/p&gt;

&lt;p&gt;Hmm… I just want to deploy a new app. Should I use Lightsail and just do it by hand? Or maybe Elastic Beanstalk - it’s designed for that (although it seems to have fallen into disrepair). Or should I go with the new hotness and wire up Code Build and Code Deploy with Code Pipeline and target the EC2 Container Service? Nah, containers is already old school, maybe I should go all in with serverless and use Lambda instead…&lt;/p&gt;

&lt;p&gt;And assuming that I can pick the technologies I want to use, now I’ve got to wrestle with IAM and my VPC settings to get it all working together.&lt;/p&gt;

&lt;p&gt;I have no doubt that Amazon knows that approachability and usability are significant barriers on AWS. They’ve done a lot to improve dashboards, and added smart wizards and getting started guides. But they still seem to struggle with a key idea: introducing &lt;strong&gt;abstractions&lt;/strong&gt;. They need to introduce higher level concepts that hide details underneath them so they can give me a simpler mental model to work with. As it stands I can click the buttons in Code Pipeline to make all the hamsters run, but as soon as I run into a problem I’m back reading the minute rules around IAM policy files.&lt;/p&gt;

&lt;p&gt;In fact it almost seems like there are &lt;strong&gt;no abstractions&lt;/strong&gt; on AWS. (This isn’t quite true - Lambda is a significant one.) But so many of the services include and expose every option, every knob, and every security setting.&lt;/p&gt;

&lt;p&gt;Car manufacturers don’t build cars like those 5000 piece lego sets. They don’t custom design every piece of your car. Much of their manufacturing and design is geared towards designing components they can re-use in multiple vehicle designs. But building on AWS still feels like building that Millennium Falcon…&lt;/p&gt;
</description>
        <pubDate>Fri, 25 Aug 2017 00:07:56 -0700</pubDate>
        <link>http://localhost:4000/aws-is-a-1000-piece-lego-kit</link>
        <guid isPermaLink="true">http://localhost:4000/aws-is-a-1000-piece-lego-kit</guid>
        
        
      </item>
    
      <item>
        <title>Competition vs. collaboration culture</title>
        <description>&lt;p&gt;(Update: Sarah Mei posted a great &lt;a href=&quot;https://twitter.com/sarahmei/status/900456086515335168&quot;&gt;tweetstorm&lt;/a&gt; about how to deliver effective criticism. Very relevant to this topic.)&lt;/p&gt;

&lt;p&gt;One of the enduring management challenges in any engineering group is finding the balance between &lt;em&gt;competition culture&lt;/em&gt; and &lt;em&gt;collaboration culture&lt;/em&gt;. Competition culture is represented by what I think of as the “classic” (or “deplorable”) engineer style: combative, arrogant, and always needing to prove one’s technical ability. Once I had a member like this on a small technical team with me. He was a recent college graduate, and was probably the smartest person in raw intelligence that I ever worked with. Unfortunately the only thing greater than his intelligence was his arrogance. He was &lt;strong&gt;always right&lt;/strong&gt; and you were &lt;strong&gt;always wrong&lt;/strong&gt;. When he finally left the company it was a great relief to the rest of the team.&lt;/p&gt;

&lt;p&gt;Taken to the extreme, this competitive style is pretty obviously detrimental in almost any team setting. However, competition is sometimes quite necessary. Sometimes your team will need to engage a difficult technical problem - one with a high level of ambiguity. In this environment it is important to drive towards the best ideas. I have often counseled engineers that work for me that they need to bring &lt;strong&gt;strong opinions&lt;/strong&gt; to a discussion. They may have the most insight into a problem, and it’s important that they are able to argue their ideas convincingly. It’s very important to demonstrate &lt;em&gt;personal humility&lt;/em&gt; - we all make mistakes (I know I do!) and we’re going to make more in the future. But it’s also important to bring your technical depth and experience to a discussion.&lt;/p&gt;

&lt;p&gt;But many engineers really prefer a culture of collaboration. They place a high premium on getting along effectively, believing that effective collaboration will be key to solving any problem that the team faces. And of course there is significant truth to this. The famous &lt;a href=&quot;https://www.nytimes.com/2016/02/28/magazine/what-google-learned-from-its-quest-to-build-the-perfect-team.html?mcubz=3&quot;&gt;Google team study&lt;/a&gt; determined that &lt;strong&gt;psychological safety&lt;/strong&gt; was the key attribute of effective teams. However, I have seen teams that were simply &lt;strong&gt;too collaborative&lt;/strong&gt;. They placed such value on getting along that they found themselves stuck in the face of hard problems. If the one person with the right answer is unwilling to argue strongly for their approach, then it can leave the team in a state of perpetual deliberation.&lt;/p&gt;

&lt;h2 id=&quot;finding-the-balance&quot;&gt;Finding the balance&lt;/h2&gt;

&lt;p&gt;I try to encourage natural &lt;em&gt;technical leaders&lt;/em&gt; and foster an environment of healthy technical debate. The key insight is to train your &lt;em&gt;competition culture engineers&lt;/em&gt; how to do competition right. Technical discussions should &lt;strong&gt;always&lt;/strong&gt; be grounded in respect for all participants. It’s critical that people leave out personal attacks (“that idea is stupid!”) and work hard to have effective discussions. Here’s a little rulebook that I use with the “competitive” engineers:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Be humble&lt;/strong&gt; - We all have things to learn, and places to improve. And there’s always things to learn from the people you work with. Take those opportunities to learn.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Start by listening&lt;/strong&gt;. Listening well is a skill to master. Work to understand the other perspective on the issue under consideration. You are more likely to convince someone else of your position if they believe you have made a serious attempt to understand theirs.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Improve your emphathy&lt;/strong&gt; Work on getting better at understanding other people’s points of view. Practice putting yourself in someone else’s shoes. Replay their points and arguments to make sure you are understanding where they’re coming from.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Stop trying to be right all the time&lt;/strong&gt;. There are places and settings for in-depth technical arguments, like a scheduled architecture meeting. But daily team chatter in Slack is not the place to constantly prove how smart you are at everyone else’s expense.&lt;/li&gt;
  &lt;li&gt;Recognize that everyone needs psychological safety. This means being careful to recognize and acknowledge your colleagues’ strengths and experience at the same time as you may be disagreeing with them on a point. “I can see lots of situations where that would work, but because of detail XYZ I suspect it will be problematic in our case. I’m happy to discuss further.”&lt;/li&gt;
  &lt;li&gt;Don’t die on every mountain. You will have your areas of expertise, but you don’t need to argue the technical points around everyone else’s expert areas. Pick a limited scope to exercise your technical authority.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Generally the collaborative engineers have less work to do, but I do try to help them see some of the needs and benefits of competition:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Some of our problems are really hard, and at times we will need a vigorous debate to find the best solutions.&lt;/li&gt;
  &lt;li&gt;A key factor for our team velocity is how quickly we can make decisions. If we try to achieve consensus every time we are going to move too slowly.&lt;/li&gt;
  &lt;li&gt;Your colleague almost certainly respects your abilities, but sometimes they will argue in a style that makes it seem like they don’t. Try to engage with them about this directly, and help them to understand how they can improve their interactions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finding this balance will help you create teams that can move fast, solve hard problems, and keep everyone happy working together.&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Aug 2017 00:21:40 -0700</pubDate>
        <link>http://localhost:4000/competition-vs-cooperation-culture</link>
        <guid isPermaLink="true">http://localhost:4000/competition-vs-cooperation-culture</guid>
        
        
      </item>
    
      <item>
        <title>Old habits die hard</title>
        <description>&lt;p&gt;I just (re-)committed the cardinal sin of checking some app secrets into a Github repository! I had started a new project and did the usual hacky thing of hard-coding my Oauth client creds into the source code. Then I went ahead and checked it all in… &lt;strong&gt;Whoops!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Admittedly the repo was private, and the secrets were only Oauth client secrets - easily regenerated. But still. My solution was to remove the secrets from the code, push to a brand new repo, and delete the old repo. Just checking in new clean versions of files obviously doesn’t work since the secrets are still in the git history.&lt;/p&gt;

&lt;p&gt;I probably need to create a new habit of where I store and access secrets. Maybe I’ll try using &lt;a href=&quot;https://www.vaultproject.io/&quot;&gt;Vault&lt;/a&gt; locally and see how that works out.&lt;/p&gt;
</description>
        <pubDate>Mon, 07 Aug 2017 17:07:00 -0700</pubDate>
        <link>http://localhost:4000/old-habits-die-hard</link>
        <guid isPermaLink="true">http://localhost:4000/old-habits-die-hard</guid>
        
        
      </item>
    
      <item>
        <title>Busting the monolith</title>
        <description>&lt;p&gt;It seems that conventional wisdom has coalesced around the idea that large applications should be built as &lt;a href=&quot;https://martinfowler.com/bliki/MonolithFirst.html&quot;&gt;monoliths first&lt;/a&gt;, and then broken down into microservices later. This makes a lot of intuitive sense: start with the easier approach first, and break out services later after your natural &lt;a href=&quot;https://martinfowler.com/bliki/BoundedContext.html&quot;&gt;bounded contexts&lt;/a&gt; are apparent.&lt;/p&gt;

&lt;p&gt;The only problem is that no one really has any good recommendations for exactly &lt;strong&gt;how&lt;/strong&gt; one is supposed to break up a monolith. Sure - identify your bounded contexts and extract services according to the boundaries. That sounds simple enough, but turns out to be really, really hard in practice.&lt;/p&gt;

&lt;h2 id=&quot;the-black-hole&quot;&gt;The black hole&lt;/h2&gt;
&lt;p&gt;One problem with monoliths is that they exert a tremendous amount of gravitational pull on your ongoing engineering efforts. Any attempt to build new features or make changes to existing logic inevitibly turns out to be much, much easier to do inside the monolith than outside. The biggest devlish detail is &lt;em&gt;state&lt;/em&gt;. Suppose I want to make an enhancement to feature A, but all state for feature A is currently stored in the monolith. Now suppose I build my new enhancement as a separate service with its own state. Now I have a synchronization problem to keep my state in sync between the new service and monolith. Moreover, my logic for this feature overall is now split between two different applications, likely leading to bugs and maintenance headaches.&lt;/p&gt;

&lt;p&gt;I can get around this problem by extracting the existing logic into a new service, and then making my enhancements to the extracted service. This sounds great, except that oftentimes the work required to do this extraction will be many times greater than the enhancement work that I need to do. So my message to stakeholders becomes, “I know you want to make these enhancements which will take 3 weeks, but first it’s gonna take us 3 months to extract this new microservice.” Multiply this logic across 4 or 5 different feature areas and you’ve got a very tough sell over the logic of “just add it to the monolith”. I know some organizations get around this problem by doing both: they have Alpha Team work on the service extraction and Beta Team work on the feature enhancement inside the monolith. This is great if you can spare that kind of duplicated effort.&lt;/p&gt;

&lt;h2 id=&quot;its-called-a-tar-ball-for-a-reason&quot;&gt;It’s called a “tar ball” for a reason&lt;/h2&gt;
&lt;p&gt;By far the biggest challenge to extracting services out of your monolith is that fact that your &lt;em&gt;bounded contexts&lt;/em&gt; are very likely a myth. You can draw those boxes on the whiteboard, but most of the time the logic in your monolith is a big ball of twine, with dependencies criss-crossing your code base and database tables. So when you do go to extract your billing logic into a nice, clean independent service, you find that all sorts of other features are woven around that logic. This is the nature of monoliths - clean internal modularity is the rare exception. Remember how we decided we would “start with the monolith” architecture? Well usually that means you are developing fast, without a clear understanding of your service boundaries. And that means it’s highly likely that you’ve got cross-feature dependencies all over the place.&lt;/p&gt;

&lt;p&gt;So now your service extraction actually looks like two projects. First, re-organize the code internal to the monolith to create a properly observed service boundary, and &lt;strong&gt;then&lt;/strong&gt; work to extract that code into a separate service. And by the way, each of those projects is likely gonna take more than a month. So now that feature you planned to implement in 3 weeks isn’t actually gonna get built until next quarter! And in the meantime the engineers are gonna be busy refactoring code and literally building &lt;strong&gt;no new features&lt;/strong&gt;. This is when you get really popular with your PM and Sales teams. Or, you could just keep hacking on the monolith…&lt;/p&gt;

&lt;h2 id=&quot;oh-and-you-need-perfect-tests&quot;&gt;Oh, and you need perfect tests&lt;/h2&gt;
&lt;p&gt;So you’ve decided to extract a service from your monolith. Congratulations! To get some of those great microservice benefits you’ve decided to rewrite your billing logic as a separate service. You go about writing the service, implementing a nice API that mirrors the internal service API you created inside the monolith when you refactored all your pricing logic. But wait. How do you &lt;strong&gt;know&lt;/strong&gt; that the new service implements all the pricing logic in exactly the same way as the old logic? Oh, cause you have unit tests. Good. Except all those tests are structured for the old logic, and they are written in a different language from the new service. Fine, you can just fall back on your exhaustive and complete integration test suite. Right? Right!?!? Oh, you’re integration tests aren’t that great? And they can’t really test all the logic cause your test data doesn’t have the years of acccumulated “real world” data that sits in your production data store? Hmm… that is too bad. And you can’t exactly run the new billing system in parallel with the old code because both systems mutate state all day long. Wow, I guess this is gonna be pretty tricky.&lt;/p&gt;

&lt;h2 id=&quot;lets-get-real&quot;&gt;Let’s get real&lt;/h2&gt;
&lt;p&gt;The fact is, this problem is &lt;strong&gt;really, really&lt;/strong&gt; hard. But people do it. It can be done. But here are some things to think about while you are happily pursuing your &lt;em&gt;monolith first&lt;/em&gt; strategy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Start thinking about microservices earlier than you think you need to.&lt;/em&gt; A better strategy than “monolith first” might be “microservices as soon as possbile.” As soon as you can start identifying some natural services boundaries then you should probably start investing in breaking a service out of your monolith. The longer you wait the harder it’s gonna be.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Break out a service that requires persistent state.&lt;/em&gt; One of the ways to “cheat” your microservice architecture is to start building new features as stateless services. This gives you logically separate services and multiple code bases, but avoids the really hard data synchronization problems that arise when you are running multiple stateful services. So don’t do that. Make sure that you start building new services that keep their own internal persistent state. This will force you to deal with your data synchronization and eventual consistency problems. You need to exercise that muscle and learn how to do it well if you want your eventual architecture to succeed.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Start refactoring your monolith now.&lt;/em&gt; If you’re monolith is a ball of spagetti, start up a serious project to start refactoring it into separate modules with service boundaries. You will need some application architecture help to enforce the boundaries (Rails and most other frameworks are not gonna do it). Start investing in that now. The sooner you start thinking about “independent services” within your code base the faster you will get to a place where service extraction isn’t a herculean task.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Recognize the anti-patterns in your tooling around the monolith.&lt;/em&gt; As the eng org grows around a monolith you will increasing find the need to create tooling to manage the massive parallel engineering going on in that one code base. Shared dev and testing environments and deployment pipelines become the bottlenecks in monolith development. Fights break out over coding standards and the “best” tools to use. Recognize this pain for what it is: a sign that you’re leeching engineering capacity into managing the monolith. The sooner you recognize this drain the sooner you can justify spending some of that time re-architecting to empower microservice development instead.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And finally, good luck. You’re gonna need it.&lt;/p&gt;
</description>
        <pubDate>Sun, 06 Aug 2017 03:52:00 -0700</pubDate>
        <link>http://localhost:4000/busting-the-monolith</link>
        <guid isPermaLink="true">http://localhost:4000/busting-the-monolith</guid>
        
        
      </item>
    
      <item>
        <title>Evented I/O with Node.js</title>
        <description>&lt;p&gt;Evented I/O with Node.js&lt;/p&gt;

&lt;p&gt;I gave a talk at NodeSummit in February about how we retrofitted our Python code base for Heroku Connect using Node.js to handle evented I/O. Check it out.&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Jul 2015 18:57:00 -0700</pubDate>
        <link>http://localhost:4000/evented-i-o-with-node-js</link>
        <guid isPermaLink="true">http://localhost:4000/evented-i-o-with-node-js</guid>
        
        
      </item>
    
      <item>
        <title>Playing with Spark</title>
        <description>&lt;p&gt;I’ve been playing around with Apache Spark recently and ran into a strange issue the very first time I tried to boot up the Spark Shell:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java.net.UnknownHostException: spersinger-
ltm1.internal.salesforce.com: spersinger-
ltm1.internal.salesforce.com: nodename nor servname
provided, or not known 
    at java.net.InetAddress.getLocalHost(InetAddress.java:1475)
    Caused by: java.net.UnknownHostException 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ah, so intuitive! Turns out the problem is described here and the answer was simple. I needed to add an entries to my hosts file mapping the loopback address to my laptop machine name. I guess this is something the JVM expects that isn’t configured automatically by OS X.&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Jul 2015 22:02:00 -0700</pubDate>
        <link>http://localhost:4000/playing-with-spark</link>
        <guid isPermaLink="true">http://localhost:4000/playing-with-spark</guid>
        
        
      </item>
    
      <item>
        <title>Photo Books with Montage</title>
        <description>&lt;p&gt;I’ve finally committed this summer to getting my digital assets in order. This consists of getting everything up on Google Photos, digitizing my numerous old MiniDV tapes from when the kids were young, and finally producing some decent photo books from my vast archive of family pics.&lt;/p&gt;

&lt;p&gt;There’s a million photo book services, including the grandaddy Shutterfly. Most of them have fairly terrible interfaces and appear to produce pedestrian results. Some of the advanced ones have desktop apps that you download and use to construct your book locally (ick!). I tried a couple and they were pretty obtuse. Finally I stumbled on Montage which I’m pretty happy with.&lt;/p&gt;

&lt;p&gt;The killer feature for me with Montage was direct import from Google Photos. This works on an album basis, so my workflow was to create an album in Google Photos with all my source photos and then import this set into Montage.&lt;/p&gt;

&lt;p&gt;What happens after import is really cool. Rather than forcing you to painstakingly layout all your pages, Montage just automatically generates the whole photo book for you. It randomly groups photos into sets and then puts each set onto a page in one of a bunch of different page templates:&lt;/p&gt;

&lt;p&gt;The templates are really nice. All sorts of interesting layouts with matting, insets, and such. Once you have your automatically generated book, then Montage includes a nice editor where you can re-arrange photos, add text, and even change the page template.&lt;/p&gt;

&lt;p&gt;All told it took me about an hour to create a 20 page book with about 50 photos. I finalized my purchase and waited for the result. The final book is really nice quality. Great cover, and photos almost bleed all the way to the edge.&lt;/p&gt;

&lt;p&gt;My only complaint is that large photos in the book seemed to have pretty poor resolution. I don’t know if this is some problem with the quality of the imported files from Google, a problem with the Montage production system, or just a limitation of my original photos. I did order the largest size book (12”x12”) so I’m sure that contributed. Also, the final book cost about $150 which is pretty pricey - I’m sure its more than other competing services. However, the middle size (8.5”) is only $79, so I’ll probably get that one next time and see how it goes.&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Jul 2015 22:05:00 -0700</pubDate>
        <link>http://localhost:4000/photo-books-with-montage</link>
        <guid isPermaLink="true">http://localhost:4000/photo-books-with-montage</guid>
        
        
      </item>
    
  </channel>
</rss>
